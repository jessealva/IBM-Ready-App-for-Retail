// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.0'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

subprojects {
    ext.updateAndroid = {
        project.android {
            signingConfigs {
                release {}
                debug {}
            }

            buildTypes {
                release {}
                debug {}
            }

            lintOptions {}
        }

        //	foo.project.android.signingConfigs.ext.set('release', {})
        //	foo.project.android.signingConfigs.release.ext.set("storePassword", 'android')
        //use debug keys by default unless we find the signing.properties file
        project.android.signingConfigs.release.storePassword = 'android'
        project.android.signingConfigs.release.keyAlias = 'androiddebugkey'
        project.android.signingConfigs.release.keyPassword = 'android'
        //Lets use the users debug signing certificate
        project.android.signingConfigs.debug.storePassword = 'android'
        project.android.signingConfigs.debug.keyAlias = 'androiddebugkey'
        project.android.signingConfigs.debug.keyPassword = 'android'
        project.android.buildTypes.release.signingConfig = android.signingConfigs.release
        project.android.buildTypes.debug.signingConfig   = android.signingConfigs.debug
        //ÃŸcheckReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        project.android.lintOptions.abortOnError = false
        project.android.lintOptions.ignoreWarnings = false
        //This is marked as an error and we will NEVER care about this, at least not now
        project.android.lintOptions.disable = ['ResAuto']

        //Now lets read the signing config properties from a properties file.
        def Properties props = new Properties()
        def user_home = java.lang.System.getenv("HOME")
        def propFile = new File(user_home + '/.android/signing.properties')
        //lets default both the release and debug signing keys to the same thing
        project.android.signingConfigs.release.storeFile = file(user_home + '/.android/debug.keystore')
        project.android.signingConfigs.debug.storeFile = file(user_home + '/.android/debug.keystore')
        if (propFile.canRead()){
            props.load(new FileInputStream(propFile))

            if (props!=null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                    props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
                def sign_file = file(user_home + '/.android/' + props['STORE_FILE'])
                println("settings storefile to : " + sign_file)
                project.android.signingConfigs.release.storeFile = sign_file
                project.android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
                project.android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
                project.android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
            } else {
                println 'Using debug signing config since ' + propFile.getAbosultePath() + ' was found but some entries were missing'
            }
        }else {
            println "Using debug signing config since couldn't find file" + propFile.getAbsolutePath()
        }
    }
}
