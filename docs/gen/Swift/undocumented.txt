LoginViewController.swift
	class LoginViewController: UIViewController, UITextFieldDelegate, UIAlertViewDelegate
	@IBOutlet weak var loginBoxView: UIView!
	@IBOutlet weak var usernameTextField: UITextField!
	@IBOutlet weak var passwordTextField: UITextField!
	@IBOutlet weak var summitLogoImageView: UIImageView!
	@IBOutlet weak var loginButton: UIButton!
	@IBOutlet weak var signUpButton: UIButton!
	@IBOutlet weak var appNameLabel: UILabel!
	@IBOutlet weak var logoHolderTopSpace: NSLayoutConstraint!
	@IBOutlet weak var loginBoxViewBottomSpace: NSLayoutConstraint!
	var logoHolderOriginalTopSpace : CGFloat!
	var loginBoxViewOriginalBottomSpace : CGFloat!
	var kFourInchIphoneHeight : CGFloat = 568
	var kFourInchIphoneLogoHolderNewTopSpace : CGFloat = 30
	var kloginBoxViewPaddingFromKeyboard : CGFloat = 60
	var presentingVC : UIViewController!
	override func viewDidAppear(animated: Bool)
	override func didReceiveMemoryWarning()
	override func disablesAutomaticKeyboardDismissal() -> Bool
CarouselCollectionViewFlowLayout.swift
	class CarouselCollectionViewFlowLayout: UICollectionViewFlowLayout
	override init()
	required init(coder aDecoder: NSCoder)
ListTableViewCell.swift
	class ListTableViewCell: UITableViewCell
	@IBOutlet weak var listImage: UIImageView!
	@IBOutlet weak var listName: UILabel!
	override func awakeFromNib()
	override func setSelected(selected: Bool, animated: Bool)
ProfileViewController.swift
	class ProfileViewController: UIViewController
	@IBOutlet weak var demoToggle: UISwitch!
	@IBOutlet weak var loginButton: UIButton!
	override func viewDidLoad()
	override func didReceiveMemoryWarning()
	override func viewDidAppear(animated: Bool)
ListItemTableViewCell.swift
	class ListItemTableViewCell: UITableViewCell
	@IBOutlet weak var itemImageView: UIImageView!
	@IBOutlet weak var itemNameLabel: UILabel!
	@IBOutlet weak var itemPriceLabel: UILabel!
	@IBOutlet weak var itemFlagImageView: UIImageView!
	@IBOutlet weak var itemDepartmentLabel: UILabel!
	override func awakeFromNib()
	override func setSelected(selected: Bool, animated: Bool)
AddToListContainerViewController.swift
	class AddToListContainerViewController: UIViewController
	var currentSegueIdentifier: NSString!
	override func viewDidLoad()
	override func didReceiveMemoryWarning()
	override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)
HorizontalPagedCollectionViewController.swift
	class HorizontalPagedCollectionViewController: UICollectionViewController
	var dataArray : [ItemMetaDataObject] = []
	override func viewDidLoad()
	override func didReceiveMemoryWarning()
	override func numberOfSectionsInCollectionView(collectionView: UICollectionView) -> Int
	override func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int
Product.swift
	class Product: RLMObject
	dynamic var id : NSString = ""
	dynamic var imageUrl : NSString = ""
	dynamic var price : Double = -1
	dynamic var salePrice : Double = 0
	dynamic var name : NSString = ""
	dynamic var type : NSString = ""
	dynamic var rev : NSString = ""
	dynamic var aisle : Int = 0
	dynamic var departmentName : NSString = ""
	dynamic var departmentId : NSString = ""
	dynamic var proximity : NSString = "1" //far proximity initially
ReadyAppsChallengeHandler.swift
	class ReadyAppsChallengeHandler : ChallengeHandler
	var appDelegate : AppDelegate = UIApplication.sharedApplication().delegate as AppDelegate!
	override init()
MILWLHelper.swift
	class MILWLHelper: NSObject
	var callBack : LoginViewController!
	var callBack : BrowseViewController!
	var callBack : ProductDetailViewController!
	var callBack : LoginViewController!
	var callBack : ProductDetailViewController!
	var callBack : BrowseViewController!
MILWebViewController.swift
	protocol MILWebViewDelegate
	optional func callBackHasChanged(pathComponents: Array<String>)
	optional func webViewHasChanged(pathComponents: Array<String>)
	optional func nativeViewHasChanged(pathComponents: Array<String>)
	class MILWebViewController : UIViewController, UIWebViewDelegate
	var webView : UIWebView = UIWebView()
	var delegate : MILWebViewDelegate?
	var startPage : String = "index.html"
	var fragment : String = ""
	var currentURL: NSURLRequest?
	let MIL_URL_SEPARATOR = "/"
	override func viewDidLoad()
	func buildFragment(parts: Array<String>) -> String
	func setupWebViewConstraints()
	func webViewDidFinishLoad(webView: UIWebView)
	func webView(webView: UIWebView, shouldStartLoadWithRequest request: NSURLRequest, navigationType: UIWebViewNavigationType) -> Bool
	func reload()
CreateListViewController.swift
	class CreateListViewController: UIViewController, UITextFieldDelegate
	@IBOutlet weak var listNameTextField: UITextField!
	var containerViewController: AddToListContainerViewController!
	override func viewDidLoad()
	override func viewDidAppear(animated: Bool)
	override func viewWillAppear(animated: Bool)
	override func viewWillDisappear(animated: Bool)
	override func didReceiveMemoryWarning()
XtifyHelper.swift
	class XtifyHelper: NSObject
HorizontalPagedCollectionViewFlowLayout.swift
	class HorizontalPagedCollectionViewFlowLayout: UICollectionViewFlowLayout
	override init()
	required init(coder aDecoder: NSCoder)
SwiftyJSON.swift
	public struct JSON
	public init(data:NSData, options opt: NSJSONReadingOptions = .AllowFragments, error: NSErrorPointer = nil)
	public init(_ object: AnyObject)
	public struct JSON
	public struct JSON
	public struct JSON
	public init(stringLiteral value: StringLiteralType)
	public init(extendedGraphemeClusterLiteral value: StringLiteralType)
	public init(unicodeScalarLiteral value: StringLiteralType)
	public struct JSON
	public init(integerLiteral value: IntegerLiteralType)
	public struct JSON
	public init(booleanLiteral value: BooleanLiteralType)
	public struct JSON
	public init(floatLiteral value: FloatLiteralType)
	public struct JSON
	public init(dictionaryLiteral elements: (String, AnyObject)...)
	public struct JSON
	public init(arrayLiteral elements: AnyObject...)
	public struct JSON
	public init(nilLiteral: ())
	public struct JSON
	public init?(rawValue: AnyObject)
	public var rawValue: AnyObject
	public func rawData(options opt: NSJSONWritingOptions = NSJSONWritingOptions(0), error: NSErrorPointer = nil) -> NSData?
	public func rawString(encoding: UInt = NSUTF8StringEncoding, options opt: NSJSONWritingOptions = .PrettyPrinted) -> String?
	public struct JSON
	public var description: String
	public var debugDescription: String
	public struct JSON
	public var array: [JSON]?
	public var arrayValue: [JSON]
	public var arrayObject: [AnyObject]?
	public struct JSON
	public var dictionary: [String : JSON]?
	public var dictionaryValue: [String : JSON]
	public var dictionaryObject: [String : AnyObject]?
	public struct JSON
	public var bool: Bool?
	public var boolValue: Bool
	public struct JSON
	public var string: String?
	public var stringValue: String
	public struct JSON
	public var number: NSNumber?
	public var numberValue: NSNumber
	public struct JSON
	public var null: NSNull?
	public struct JSON
	public var URL: NSURL?
	public struct JSON
	public var double: Double?
	public var doubleValue: Double
	public var float: Float?
	public var floatValue: Float
	public var int: Int?
	public var intValue: Int
	public var uInt: UInt?
	public var uIntValue: UInt
	public var int8: Int8?
	public var int8Value: Int8
	public var uInt8: UInt8?
	public var uInt8Value: UInt8
	public var int16: Int16?
	public var int16Value: Int16
	public var uInt16: UInt16?
	public var uInt16Value: UInt16
	public var int32: Int32?
	public var int32Value: Int32
	public var uInt32: UInt32?
	public var uInt32Value: UInt32
	public var int64: Int64?
	public var int64Value: Int64
	public var uInt64: UInt64?
	public var uInt64Value: UInt64
	public struct JSON
	public func ==(lhs: JSON, rhs: JSON) -> Bool
	public func <=(lhs: JSON, rhs: JSON) -> Bool
	public func >=(lhs: JSON, rhs: JSON) -> Bool
	public func >(lhs: JSON, rhs: JSON) -> Bool
	public func <(lhs: JSON, rhs: JSON) -> Bool
	var isBool:Bool
	public func ==(lhs: NSNumber, rhs: NSNumber) -> Bool
	public func !=(lhs: NSNumber, rhs: NSNumber) -> Bool
	public func <(lhs: NSNumber, rhs: NSNumber) -> Bool
	public func >(lhs: NSNumber, rhs: NSNumber) -> Bool
	public func <=(lhs: NSNumber, rhs: NSNumber) -> Bool
	public func >=(lhs: NSNumber, rhs: NSNumber) -> Bool
	public struct JSON
	public init(object: AnyObject)
	public var dictionaryObjects: [String : AnyObject]?
	public var arrayObjects: [AnyObject]?
	public var char: Int8?
	public var charValue: Int8
	public var unsignedChar: UInt8?
	public var unsignedCharValue: UInt8
	public var short: Int16?
	public var shortValue: Int16
	public var unsignedShort: UInt16?
	public var unsignedShortValue: UInt16
	public var long: Int?
	public var longValue: Int
	public var unsignedLong: UInt?
	public var unsignedLongValue: UInt
	public var longLong: Int64?
	public var longLongValue: Int64
	public var unsignedLongLong: UInt64?
	public var unsignedLongLongValue: UInt64
	public var integer: Int?
	public var integerValue: Int
	public var unsignedInteger: Int?
	public var unsignedIntegerValue: Int
NSValue.h
	class NSNumber : NSValue
ProductDetailViewController.swift
	class ProductDetailViewController: MILWebViewController, MILWebViewDelegate, UIAlertViewDelegate
	@IBOutlet weak var addToListContainerView: UIView!
	@IBOutlet weak var addToListContainerViewBottomSpace: NSLayoutConstraint!
	@IBOutlet weak var backBarButton: UIBarButtonItem!
	@IBOutlet weak var addedToListPopupLabel: UILabel!
	@IBOutlet weak var addedToListPopup: UIView!
	@IBOutlet weak var dimViewButton: UIButton!
	var addToListContainerViewDestinationBottomSpace: CGFloat!
	var containerViewController: AddToListContainerViewController!
	var productId : NSString = ""
	var currentProduct : Product!
	var webViewReady : Bool = false
	var jsonDataReady : Bool = false
	var jsonString : NSString!
	var json : JSON?
	var addToListVisible : Bool = false
	override func viewDidLoad()
	override func didReceiveMemoryWarning()
	override func viewWillAppear(animated: Bool)
	override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)
ItemMetaDataObject.swift
	class ItemMetaDataObject: NSObject
	var id : NSString = ""
	var imageUrl : NSString = ""
	var type : NSString = ""
	var rev : NSString = ""
EmptySegue.swift
	class EmptySegue: UIStoryboardSegue
	override func perform()
UserAuthHelper.swift
	class UserAuthHelper: NSObject
CreateNewListTableViewCell.swift
	class CreateNewListTableViewCell: UITableViewCell
	override func awakeFromNib()
	override func setSelected(selected: Bool, animated: Bool)
HorizontalPagedCollectionViewCell.swift
	class HorizontalPagedCollectionViewCell: UICollectionViewCell
	@IBOutlet weak var imageView: UIImageView!
	override init(frame: CGRect)
	required init(coder aDecoder: NSCoder)
List.swift
	class List: RLMObject
	dynamic var name = ""
	dynamic var products = RLMArray(objectClassName: Product.className())
CarouselCollectionViewController.swift
	class CarouselCollectionViewController: UICollectionViewController, UIScrollViewDelegate
	var dataArray : [ItemMetaDataObject] = []
	var currentIndex : CGFloat = 0
	var timer : NSTimer!
	var pageControl : UIPageControl!
	var finishedSetup : Bool = false;
	override func didReceiveMemoryWarning()
	override func collectionView(collectionView: UICollectionView, didSelectItemAtIndexPath indexPath: NSIndexPath)
AppDelegate.swift
	class AppDelegate: UIResponder, UIApplicationDelegate
	var window: UIWindow?
	var beaconManager: BeaconManager?
	var productDetailViewController : ProductDetailViewController!
	var demoModeWillSendNotification : Bool = false
	override init()
	func application(application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: NSData)
	func application(application: UIApplication, didReceiveRemoteNotification userInfo: [NSObject : AnyObject])
	func application(application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: NSError)
	func handleAnyNotification(receivedData: Dictionary<NSObject,AnyObject>)
	func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool
	func delay(delay:Double, closure:()->())
	func applicationWillResignActive(application: UIApplication)
	func applicationDidEnterBackground(application: UIApplication)
	func applicationWillEnterForeground(application: UIApplication)
	func applicationDidBecomeActive(application: UIApplication)
	func applicationWillTerminate(application: UIApplication)
BrowseViewController.swift
	class BrowseViewController: UIViewController, UIAlertViewDelegate
	@IBOutlet weak var scrollView: UIScrollView!
	@IBOutlet weak var scrollViewContentView: UIView!
	@IBOutlet weak var featuredContainerView: UIView!
	@IBOutlet weak var recommendedLabel: UILabel!
	@IBOutlet weak var recommendedContainerView: UIView!
	@IBOutlet weak var shopAllLabel: UILabel!
	@IBOutlet weak var shopAllContainerView: UIView!
	var dataArray = []
	var featuredCarouselCollectionViewController : CarouselCollectionViewController!
	var recommendedHorizontalPagedCollectionViewController : HorizontalPagedCollectionViewController!
	var shopAllHorizontalPagedCollectionViewController : HorizontalPagedCollectionViewController!
	var productDetailViewController : ProductDetailViewController!
	var logoImageView : UIImageView!
	@IBOutlet weak var scrollViewContentViewHeight: NSLayoutConstraint!
	override func viewDidLoad()
	override func viewWillDisappear(animated: Bool)
	override func viewWillAppear(animated: Bool)
	override func didReceiveMemoryWarning()
BlankTableViewCell.swift
	class BlankTableViewCell: UITableViewCell
	override func awakeFromNib()
	override func setSelected(selected: Bool, animated: Bool)
JSONParseHelper.swift
	class JSONParseHelper: NSObject
ListItemsTableViewController.swift
	class ListItemsTableViewController: UITableViewController
	var list : List!
	var dataArray : RLMResults!
	var numberOfItemsInSection : Int = 0
	var notificationToken: RLMNotificationToken?
	var productDetailViewController : ProductDetailViewController!
	var departmentSortedBy: String!
	@IBOutlet weak var backBarButton: UIBarButtonItem!
	override func viewDidLoad()
	override func didReceiveMemoryWarning()
	override func viewWillAppear(animated: Bool)
	override func viewDidAppear(animated: Bool)
	override func viewWillDisappear(animated: Bool)
	override func numberOfSectionsInTableView(tableView: UITableView) -> Int
	override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int
	override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)
AddToListTableViewController.swift
	class AddToListTableViewController: UITableViewController
	var dataArray = List.allObjects().sortedResultsUsingProperty("name", ascending: true)
	var notificationToken: RLMNotificationToken?
	override func viewDidLoad()
	override func didReceiveMemoryWarning()
	override func numberOfSectionsInTableView(tableView: UITableView) -> Int
ListViewController.swift
	class ListViewController: UIViewController
	override func viewDidLoad()
	override func viewWillAppear(animated: Bool)
	override func didReceiveMemoryWarning()
	override func viewDidAppear(animated: Bool)
	override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)
ListTableViewController.swift
	class ListTableViewController: UITableViewController
	var dataArray = List.allObjects().sortedResultsUsingProperty("name", ascending: true)
	var toListItemsSegueDestinationViewController : ListItemsViewController!
	var notificationToken: RLMNotificationToken?
	override func viewDidLoad()
	override func viewWillAppear(animated: Bool)
	override func didReceiveMemoryWarning()
	override func numberOfSectionsInTableView(tableView: UITableView) -> Int
	override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)
CreateListInAddToListHierarchyViewController.swift
	class CreateListInAddToListHierarchyViewController: UIViewController, UITextFieldDelegate
	@IBOutlet weak var listNameTextField: UITextField!
	var containerViewController: AddToListContainerViewController!
	override func viewDidLoad()
	override func viewDidAppear(animated: Bool)
	override func didReceiveMemoryWarning()
RealmHelper.swift
	class RealmHelper: NSObject
BeaconManager.swift
	class BeaconManager: NSObject, CLLocationManagerDelegate
	var locationManager : CLLocationManager?
	var allBeacons: Array<String> = Array<String>()
	var beaconRegion : CLBeaconRegion?
	var closestBeaconID: String!
	var departmentsCount: Int = 0
	var productClose: Product = Product()
	var listItemsTableViewController: ListItemsTableViewController!
	var canRefreshListItemsTableViewController: Bool = false
	var departments : [String: String] = [String:String]()
	var departmentsArray: [String]!
AddToListViewController.swift
	class AddToListViewController: UIViewController
	override func viewDidLoad()
	override func viewDidAppear(animated: Bool)
	override func didReceiveMemoryWarning()
TotalTableViewCell.swift
	class TotalTableViewCell: UITableViewCell
	@IBOutlet weak var totalPriceLabel: UILabel!
	override func awakeFromNib()
	override func setSelected(selected: Bool, animated: Bool)
SyntaxChecker.swift
	public class SyntaxChecker
ListTableViewControllerHelper.swift
	class ListTableViewControllerHelper: NSObject
TabBarViewController.swift
	class TabBarViewController: UITabBarController
	override func viewDidLoad()
	override func didReceiveMemoryWarning()
ListItemsViewController.swift
	class ListItemsViewController: UIViewController
	var list: List!
	@IBOutlet var sortedListPopup: UIView!
	@IBOutlet weak var sortedListPopupLabel: UILabel!
	@IBOutlet weak var backBarButton: UIBarButtonItem!
	override func viewDidLoad()
	override func didReceiveMemoryWarning()
	override func viewWillAppear(animated: Bool)
	override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)
CarouselCollectionViewCell.swift
	class CarouselCollectionViewCell: UICollectionViewCell
	@IBOutlet weak var imageView: UIImageView!
	override init(frame: CGRect)
	required init(coder aDecoder: NSCoder)
RLMSupport.swift
	public class func objectsWhere(predicateFormat: String, _ args: CVarArgType...) -> RLMResults
	public class func objectsInRealm(realm: RLMRealm, _ predicateFormat: String, _ args: CVarArgType...) -> RLMResults
	public func generate() -> GeneratorOf<RLMObject>
	public func indexOfObjectWhere(predicateFormat: String, _ args: CVarArgType...) -> UInt
	public func objectsWhere(predicateFormat: String, _ args: CVarArgType...) -> RLMResults
	public func generate() -> GeneratorOf<RLMObject>
	public func indexOfObjectWhere(predicateFormat: String, _ args: CVarArgType...) -> UInt
	public func objectsWhere(predicateFormat: String, _ args: CVarArgType...) -> RLMResults
